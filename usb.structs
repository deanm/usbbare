enum {
  Device;
  Interface;
  Endpoint;
  Other;
} RequestTypeRecipient;

enum {
  DEVICE = 1;
  CONFIGURATION = 2;
  STRING = 3;
  INTERFACE = 4;
  ENDPOINT = 5;
  DEVICE_QUALIFIER = 6;
  OTHER_SPEED_CONFIGURATION = 7;
  INTERFACE_POWER = 8;
} DescriptorTypes;

enum {
  Standard;
  Class;
  Vendor;
  Reserved;
} RequestTypeType;

enum {
  HostToDevice;
  DeviceToHost;
} RequestTypeTransferDirection;

struct {
  RequestTypeRecipient recipient:5;
  RequestTypeType type:2;
  RequestTypeTransferDirection transferDirection:1;
} bmRequestType;

enum {
  GET_STATUS = 0;
  CLEAR_FEATURE = 1;
  SET_FEATURE = 3;
  SET_ADDRESS = 5;
  GET_DESCRIPTOR = 6;
  SET_DESCRIPTOR = 7;
  GET_CONFIGURATION = 8;
  SET_CONFIGURATION = 9;
  GET_INTERFACE = 10;
  SET_INTERFACE = 11;
  SYNCH_FRAME = 12;
} SetupRequestCodes;

struct {
  bmRequestType bmRequestType:8;
  SetupRequestCodes bRequest:8;
  uint wValue:16;
  uint wIndex:16;
  uint wLength:16;
} setup;

struct {
  uint ADDR:7;
  uint EndPoint:4;
  uint CRC5:5;
} TokenPacket;

struct {
  uint FrameNumber:11;
  uint CRC5:5;
} StartOfFramePacket;

struct {
  uint bLength:8;
  uint bDescriptorType:8;
  uint bcdUSB:16;
  uint bDeviceClass:8;
  uint bDeviceSubClass:8;
  uint bDeviceProtocol:8;
  uint bMaxPacketSize0:8;
  uint idVendor:16;
  uint idProduct:16;
  uint bcdDevice:16;
  uint iManufacturer:8;
  uint iProduct:8;
  uint iSerialNumber:8;
  uint bNumConfigurations:8;
} StandardDeviceDescriptor;

struct {
  uint Reserved0:5;
  uint RemoteWakeup:1;
  uint SelfPowered:1;
  uint Reserved1:1;
} StandardConfigurationDescriptorAttributes;
struct {
  uint bLength:8;
  uint bDescriptorType:8;
  uint wTotalLength:16;
  uint bNumInterfaces:8;
  uint bConfigurationValue:8;
  uint iConfiguration:8;
  StandardConfigurationDescriptorAttributes bmAttributes:8;
  uint bMaxPower:8;
} StandardConfigurationDescriptor;

struct {
  uint bLength:8;
  uint bDescriptorType:8;
  uint bInterfaceNumber:8;
  uint bAlternateSetting:8;
  uint bNumEndpoints:8;
  uint bInterfaceClass:8;
  uint bInterfaceSubClass:8;
  uint bInterfaceProtocol:8;
  uint iInterface:8;
} StandardInterfaceDescriptor;

enum {
  Control;
  Isochronous;
  Bulk;
  Interrupt;
} StandardEndpointDescriptorAttributesTransferType;

enum {
  NoSynchronization;
  Asynchronous;
  Adaptive;
  Synchronous;
} StandardEndpointDescriptorAttributesSynchronizationType;

enum {
  DataEndpoint;
  FeedbackEndpoint;
  ImplicitFeedbackDataEndpoint;
  Reserved;
} StandardEndpointDescriptorAttributesUsageType;

struct {
  StandardEndpointDescriptorAttributesTransferType TransferType:2;
  StandardEndpointDescriptorAttributesSynchronizationType SynchronizationType:2;
  StandardEndpointDescriptorAttributesUsageType UsageType:2;
  uint Reserved:2;
} StandardEndpointDescriptorAttributes;

enum {
  OUT;
  IN;
} StandardEndpointDescriptorEndpointAddressDirection;

struct {
  uint EndpointNumber:4;
  uint Reserved:3;
  StandardEndpointDescriptorEndpointAddressDirection Direction:1;  // Ignored for control endpoints.
} StandardEndpointDescriptorEndpointAddress;

struct {
  uint bLength:8;
  uint bDescriptorType:8;
  StandardEndpointDescriptorEndpointAddress bEndpointAddress:8;
  StandardEndpointDescriptorAttributes bmAttributes:8;
  uint wMaxPacketSize:8;
  uint bInterval:8;
  uint bLength:8;

} StandardEndpointDescriptor;
