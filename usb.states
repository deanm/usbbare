
// 8.4.6.4 Function Response to a SETUP Transaction
//   Upon receiving a SETUP token, a function must accept the data. A function
//   may not respond to a SETUP token with either STALL or NAK, and the
//   receiving function must accept the data packet that follows the SETUP
//   token. If a non-control endpoint receives a SETUP token, it must ignore
//   the transaction and return no response.
transaction SetupTransaction : ADDR, EndPoint, setup {
  state setup_run {
    want SSPLIT ET:0 {
      spawn setup_run;
      transition ssplit_setup HubAddr Port;
    }

    want SETUP {
      spawn setup_run;
      capture ADDR ADDR;
      capture EndPoint EndPoint;
      transition setup_data;
    }
  }

  state ssplit_setup : hub, port {
    want SETUP {
      capture ADDR ADDR;
      capture EndPoint EndPoint;
      transition ssplit_setup_data ADDR EndPoint hub port;
      break;  // We don't want to newly spawned state machine processing this same packet again.
    }
    need {
      die;  // Don't cause a failed transaction just from the SSPLIT.
    }
  }

  state setup_data {
    need DATA0 data.length:8 parse:setup {
      capture setup setup;
      transition setup_ack;
    }
  }

  state ssplit_setup_data : addr, endp, hub, port {
    need DATA0 data.length:8 parse:setup {
      capture setup setup;
      transition ssplit_setup_ack addr endp hub port;
    }
  }

  state ssplit_setup_ack : addr, endp, hub, port {
    need ACK {
      transition csplit addr endp hub port;
    }
  }

  state csplit : addr, endp, hub, port {
    want CSPLIT ET:0 HubAddr:hub Port:port {
      transition csplit_setup addr endp hub port;
    }
  }

  state csplit_setup : addr, endp, hub, port {
    want SETUP ADDR:addr EndPoint:endp {
      transition csplit_handshake addr endp hub port;
      break;
    }
  }

  state csplit_handshake : addr, endp, hub, port {
    want NYET {
      pop packets; pop packets; pop packets;  // Clean up the packet IDs.
      transition csplit addr endp hub port;
    }
    need ACK {
      success;
    }
  }

  state setup_ack {
    need ACK {
      success;
    }
  }
}

transaction BulkTransactionIn : ADDR, EndPoint, data {
  state bulkin_run {
    want SSPLIT ET:0, SSPLIT ET:2 {  // Control or Bulk
      spawn bulkin_run;
      transition ssplit_in HubAddr Port;
    }

    want IN {
      spawn bulkin_run;
      capture ADDR ADDR;
      capture EndPoint EndPoint;
      transition bulkin_data;
    }
  }

  state ssplit_in : hub, port {
    want IN {
      capture ADDR ADDR;
      capture EndPoint EndPoint;
      transition ssplit_ack ADDR EndPoint hub port;
      break;
    }
    need {
      die;  // Don't cause a failed transaction just from the SSPLIT.
    }
  }

  state ssplit_ack : addr, endp, hub, port {
    need ACK {
      transition csplit addr endp hub port;
    }
  }

  state csplit : addr, endp, hub, port {
    want CSPLIT ET:0 HubAddr:hub Port:port, CSPLIT ET:2 HubAddr:hub Port:port {
      transition csplit_in addr endp hub port;
    }
  }

  state csplit_in : addr, endp, hub, port {
    want IN ADDR:addr EndPoint:endp {
      transition csplit_data addr endp hub port;
      break;
    }
    need {
      transition csplit addr endp hub port;
    }
  }

  state csplit_data : addr, endp, hub, port {
    want NAK {
      die;  // Don't treat as a failed transaction.
    }
    want NYET {
      pop packets; pop packets; pop packets;  // Clean up the packet IDs.
      transition csplit addr endp hub port;
    }
    need pid_type:DATA {
      capture data data;
      success;
    }
  }

  state bulkin_data {
    want NAK {
      die;  // Don't treat as a failed transaction.
    }
    need pid_type:DATA {
      capture data data;
      transition bulkin_ack;
    }
  }

  state bulkin_ack {
    need ACK {
      success;
    }
  }
}

transaction BulkTransactionOut : ADDR, EndPoint, data {
  state bulkout_run {
    want SSPLIT ET:0, SSPLIT ET:2 {  // Control or Bulk
      spawn bulkout_run;
      transition ssplit_out HubAddr Port;
    }

    want OUT {
      spawn bulkout_run;
      capture ADDR ADDR;
      capture EndPoint EndPoint;
      transition bulkout_data;
    }
  }

  state ssplit_out : hub, port {
    want OUT {
      capture ADDR ADDR;
      capture EndPoint EndPoint;
      transition ssplit_data ADDR EndPoint hub port;
      break;
    }
    need {
      die;  // Don't cause a failed transaction just from the SSPLIT.
    }
  }

  state ssplit_data : addr, endp, hub, port {
    need pid_type:DATA {
      capture data data;
      transition ssplit_ack addr endp hub port;
    }
  }

  state ssplit_ack : addr, endp, hub, port {
    need ACK {
      transition csplit addr endp hub port;
    }
  }

  state csplit : addr, endp, hub, port {
    want CSPLIT ET:0 HubAddr:hub Port:port, CSPLIT ET:2 HubAddr:hub Port:port {
      transition csplit_out addr endp hub port;
    }
  }

  state csplit_out : addr, endp, hub, port {
    want OUT ADDR:addr EndPoint:endp {
      transition csplit_ack addr endp hub port;
      break;
    }
    need {
      transition csplit addr endp hub port;
    }
  }

  state csplit_ack : addr, endp, hub, port {
    want NYET {
      pop packets; pop packets; pop packets;  // Clean up the packet IDs.
      transition csplit addr endp hub port;
    }
    need ACK {
      success;
    }
  }

  state bulkout_data {
    need pid_type:DATA {
      capture data data;
      transition bulkout_ack;
    }
  }

  state bulkout_ack {
    need ACK {
      success;
    }
  }
}

transaction InterruptTransactionIn : ADDR, EndPoint, data {
  state run {
    want SSPLIT ET:3 {  // Interrupt
      spawn run;
      transition ssplit_in HubAddr Port;
    }
  }

  state ssplit_in : hub, port {
    want IN {
      capture ADDR ADDR;
      capture EndPoint EndPoint;
      transition csplit ADDR EndPoint hub port;
      break;
    }
    need {
      die;  // Don't cause a failed transaction just from the SSPLIT.
    }
  }

  state csplit : addr, endp, hub, port {
    want CSPLIT ET:3 HubAddr:hub Port:port {
      transition csplit_in addr endp hub port;
    }
  }

  state csplit_in : addr, endp, hub, port {
    want IN ADDR:addr EndPoint:endp {
      transition csplit_data addr endp hub port;
      break;
    }
    need {
      transition csplit addr endp hub port;
    }
  }

  state csplit_data : addr, endp, hub, port {
    want NAK { die; }
    need DATA0, DATA1 {
      capture data data;
      success;
    }
  }
}

transfer ControlTransfer : ADDR, EndPoint, setup, data {
  state ct_run {
    want SetupTransaction {
      capture ADDR ADDR;
      capture EndPoint EndPoint;
      capture setup setup;
      want setup.bmRequestType.transferDirection:0 {
        spawn ct_run;
        transition ct_dataout0 ADDR EndPoint setup.wLength nil;
      }
      need setup.bmRequestType.transferDirection:1 {
        spawn ct_run;
        transition ct_datain0 ADDR EndPoint setup.wLength nil;
      }
    }
  }

  // 9.3.5 wLength
  // On an input request, a device must never return more data than is
  // indicated by the wLength value; it may return less. On an output request,
  // wLength will always indicate the exact amount of data to be sent by the
  // host. Device behavior is undefined if the host should send more data than
  // is specified in wLength.
  state ct_datain0 : addr, endp, bytes_left, bytes {
    want ADDR:addr EndPoint:endp {
      want bytes_left:0 {
        need BulkTransactionOut data.length:0 {
          capture data bytes;
          success;
        }
      }
      want BulkTransactionOut data.length:0 {  // Read less than wLength.
        capture data bytes;
        success;
      }
      need BulkTransactionIn {
        dec bytes_left data.length;
        append bytes data;
        capture data bytes;  // So that failed transfers have any data there was.
        transition ct_datain0 addr endp bytes_left bytes;
      }
    }
  }
  state ct_dataout0 : addr, endp, bytes_left, bytes {
    want ADDR:addr EndPoint:endp {
      want bytes_left:0 {
        need BulkTransactionIn data.length:0 {
          capture data bytes;
          success;
        }
      }
      need BulkTransactionOut {
        dec bytes_left data.length;
        append bytes data;
        capture data bytes;  // So that failed transfers have any data there was.
        transition ct_dataout0 addr endp bytes_left bytes;
      }
    }
  }
}
